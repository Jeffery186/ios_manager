
  Future<void> airDrop(SelfFileEntity file) async {
    IO.Socket socket = _commonModel.socket;
    if (socket != null && socket.connected) {
      if (!_isSendingFile) {
        _isSendingFile = true;
        socket.emit('will-upload-file', {'filename': file.filename});
        BotToast.showText(text: '正在发送');
        File(file.entity.path).openRead().listen((bytes) {
          socket.emitWithBinary(UPLOAD_FILE, bytes);
        }, onDone: () {
          _isSendingFile = false;
          socket.emit('upload-file-done' /* , {'filename': file.filename} */);
          if (_willSendFileQueue.isNotEmpty) {
            airDrop(_willSendFileQueue.removeAt(0));
          }
        });
      } else {
        BotToast.showText(text: '任务已被加入队列');
        _willSendFileQueue.add(file);
      }
    } else {
      BotToast.showText(text: '请连接后在试');
    }
  }


  
// IO.Socket createMySocketClient({
//   @required String ip,
//   @required String port,
//   @required String internalIp,
//   Function(IO.Socket) onInitSocket,
//   Function(IO.Socket) onConnect,
//   Function(dynamic) onDisconnect,
//   Function(String) onReceiveClipboard,
//   Function(String) onReceiveFile,
//   bool isInit = false,
// }) {
//   String url = 'http://$ip:$port';

//   IO.Socket socket = IO.io(url, {
//     'transports': ['websocket'],
//     'autoConnect': true
//   });

//   if (onConnect != null) onInitSocket(socket);

//   socket.on('connect', (_) {
//     if (isInit) {
//       BotToast.showSimpleNotification(
//         title: '自动连接至',
//         subTitle: url,
//         closeIcon: Icon(Icons.close),
//         duration: Duration(seconds: 8),
//       );
//     }

//     // 发送本机地址 作为已连接的地址
//     socket.emit('connected-address', '$internalIp:$port');
//     if (onConnect != null) onConnect(socket);
//   });
//   socket.on('disconnect', (_) {
//     if (onDisconnect != null) onDisconnect(_);
//   });

//   socket.on('clipboard-to-client', (_) {
//     if (onReceiveClipboard != null) onReceiveClipboard(_);
//   });

//   // socket.on('clipboard-to-client', (_) {
//   //   if (onReceiveFile != null) onReceiveFile(_);
//   // });

//   socket.on('connect_error', (error) {
//     recordError(text: error.toString(), methodName: 'createMySocketClient');
//   });

//   return socket;
// }



import 'package:flutter/material.dart';
import 'package:flutter/physics.dart';

main() {
  runApp(MaterialApp(home: PhysicsCardDragDemo()));
}

class PhysicsCardDragDemo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(),
      body: DraggableCard(
        child: FlutterLogo(
          size: 128,
        ),
      ),
    );
  }
}

/// A draggable card that moves back to [Alignment.center] when it's
/// released.
class DraggableCard extends StatefulWidget {
  final Widget child;
  DraggableCard({this.child});

  @override
  _DraggableCardState createState() => _DraggableCardState();
}

class _DraggableCardState extends State<DraggableCard>
    with SingleTickerProviderStateMixin {
  AnimationController _controller;

  /// The alignment of the card as it is dragged or being animated.
  ///
  /// While the card is being dragged, this value is set to the values computed
  /// in the GestureDetector onPanUpdate callback. If the animation is running,
  /// this value is set to the value of the [_animation].
  Alignment _dragAlignment = Alignment.center;

  Animation<Alignment> _animation;

  /// Calculates and runs a [SpringSimulation].
  void _runAnimation(Offset pixelsPerSecond, Size size) {
    _animation = _controller.drive(
      AlignmentTween(
        begin: _dragAlignment,
        end: Alignment.center,
      ),
    );
    // Calculate the velocity relative to the unit interval, [0,1],
    // used by the animation controller.
    final unitsPerSecondX = pixelsPerSecond.dx / size.width;
    final unitsPerSecondY = pixelsPerSecond.dy / size.height;
    final unitsPerSecond = Offset(unitsPerSecondX, unitsPerSecondY);
    final unitVelocity = unitsPerSecond.distance;

    const spring = SpringDescription(
      mass: 30,
      stiffness: 1,
      damping: 1,
    );

    final simulation = SpringSimulation(spring, 0, 1, -unitVelocity);

    _controller.animateWith(simulation);
  }

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(vsync: this);

    _controller.addListener(() {
      setState(() {
        _dragAlignment = _animation.value;
      });
    });
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    return GestureDetector(
      onPanDown: (details) {
        _controller.stop();
      },
      onPanUpdate: (details) {
        setState(() {
          _dragAlignment += Alignment(
            details.delta.dx / (size.width / 2),
            details.delta.dy / (size.height / 2),
          );
        });
      },
      onPanEnd: (details) {
        _runAnimation(details.velocity.pixelsPerSecond, size);
      },
      child: Align(
        alignment: _dragAlignment,
        child: Card(
          child: widget.child,
        ),
      ),
    );
  }
}