print(await AndroidMix.storage.getExternalCacheDir);

                            String root = await AndroidMix
                                .storage.getExternalStorageDirectory;
                            String a = await AndroidMix.storage.getFilesDir;
                            String root1 =
                                await AndroidMix.storage.getStorageDirectory;

                            // print(Platform.operatingSystem);
                            // print(Platform.environment);
                            // print(Platform.script);
                            // print(Platform.executableArguments);
                            // print(Platform.packageConfig);
                            // print(Pal);

                            // Map r = await AndroidMix.command.exec('ls -a');
                            // print(r);
                            // print(Platform);
                            print(SysInfo.kernelArchitecture);
                            // for (var processor in SysInfo.processors) {
                            //   print(
                            //       "  Architecture          : ${processor.architecture}");
                            //   print(
                            //       "  Name                  : ${processor.name}");
                            //   print(
                            //       "  Socket                : ${processor.socket}");
                            //   print(
                            //       "  Vendor                : ${processor.vendor}");
                            // }
                            // await http
                            //     .get(
                            //         'http://192.168.43.15:8080/proot/proot_arrch64')
                            //     .then((value) async {
                            //   print(value.headers);
                            //   await File('$a/proot')
                            //       .writeAsBytes(value.bodyBytes)
                            //       .whenComplete(() {
                            //     print('done');
                            //   });
                            // });
                            // await http
                            //     .get(
                            //         'http://192.168.43.15:8080/zip/alpine-minirootfs-3.12.0-${SysInfo.kernelArchitecture}.tar.gz')
                            //     .then((value) async {
                            //   print(value.headers);
                            //   await File(
                            //           '$a/alpine-minirootfs-${SysInfo.kernelArchitecture}.tar.gz')
                            //       .writeAsBytes(value.bodyBytes)
                            //       .whenComplete(() {
                            //     print('done');
                            //   });
                            // });

                            // await http
                            //     .get(
                            //         'http://192.168.43.15:8080/zip/code-server.tar.gz')
                            //     .then((value) async {
                            //   print(value.headers);
                            //   await File('$a/rootfs/root/code-server.tar.gz')
                            //       .writeAsBytes(value.bodyBytes)
                            //       .whenComplete(() {
                            //     print('done');
                            //   });
                            // });

                            // String root1 =
                            //     await AndroidMix.storage.getStorageDirectory;
                            // String a = await AndroidMix.storage.getFilesDir;

                            // print(await AndroidMix
                            //     .storage.getApplicationDocumentsDirectory);
                            // await File('$root/Download/code-server.zip')
                            //     .rename('$a/code-server.zip');
                            // File('/').
                            // print("demodmoemdoe");
                            // List<ProcessResult> b =
                            //     await Shell().run('chmod 555 $a/code.zip');
                            // for (var item in b) {
                            //   print(item.stdout.toString());
                            // }
                            // bool result = await AndroidMix.archive
                            //     .unzip('$root/code.zip', '$root');
                            // if (result) {
                            //   print('done');
                            // } else {
                            //   print('error');
                            // }
                            // List<ProcessResult> b = await Shell().run(
                            //     '/data/data/com.sewerganger.lan_file_more/files/proot');
                            // for (var item in b) {
                            //   print(item.stdout.toString());
                            // }
                            // List<ProcessResult> c = await Shell().run(
                            //     'cd $a/code-server-3.4.1-linux-arm64/bin --help');
                            // for (var item in c) {
                            //   print(item.stdout.toString());
                            // }
                            // print('$a/proot');
                            // List<ProcessResult> c =
                            //     await Shell().run('/system/bin/sh $a/proot');
                            // for (var item in c) {
                            //   print(item.stdout.toString());
                            //   print(
                            //       "==============================================");
                            //   print(item.stderr.toString());
                            // }
                            // ProcessResult r = await Process.run(
                            //     'chmod',
                            //     [
                            //       '777',
                            //       '-R',
                            //       '$a/rootfs/home/code-server',
                            //     ],
                            //     workingDirectory: '/');
                            // print(r.toString());
                            // ProcessResult rr = await Process.run(
                            //     'uname', ['LD_PRELOAD'],
                            //     workingDirectory: '/');
                            // print(rr.stderr.toString());
                            // print(rr.stdout.toString());
                            // File('$a/rootfs/etc/resolv.conf').writeAsString(
                            //     """nameserver 1.1.1.1\nnameserver 1.0.0.1""");

                            Process r = await Process.start(
                              '$a/proot',
                              [
                                '-0',
                                '--link2symlink',
                                '-r',
                                '$a/rootfs',
                                '-b',
                                '/dev/',
                                '-b',
                                '/sys/',
                                '-b',
                                '/proc/',
                                '-w',
                                '/root',
                                '/usr/bin/env',
                                'HOME=/root',
                                'PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/sbin:/usr/local/bin/',
                                'LANG=C.UTF-8',
                                '/root/code-server/code-server-3.4.1-linux-arm64/lib/node /root/code-server/code-server-3.4.1-linux-arm64/'
                                // 'node',
                                // '--version'
                                // 'rebuild',
                                // '/root/code-server/code-server-3.4.1-linux-arm64',
                                // 'add',
                                // 'npm',

                                // 'pwd',
                                // 'ps',
                                // '-a'
                                // 'kill',
                                // '-9',
                                // '12584'
                                // 'node',
                                // '/root/code-server/code-server-3.4.1-linux-arm64',
                                // '--auth',
                                // 'none'
                                // '--version'
                                // 'apk',
                                // 'add',
                                // 'nodejs==12.18.3-r0'
                                // 'list',
                                // 'update',
                                // 'ps',
                                // '-a',
                                // 'nodejs'

                                // 'sed',
                                // '-i',
                                // 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g',
                                // '/etc/apk/repositories'
                                // 'add',
                                // 'nodejs'
                                // '/bin/sh',
                                // '--login',
// exec proot --link2symlink -0 -r ${HOME}/TermuxAlpine/ -b /dev/ -b /sys/ -b /proc/ -b /storage/ -b $HOME -w $HOME /usr/bin/env HOME=/root TERM="$TERM" LANG=$LANG PATH=/bin:/usr/bin:/sbin:/usr/sbin /bin/sh --login
                                // './code-server/code-server-3.4.1-linux-arm64/lib/node',
                                // '--version'
                                // '--auth',
                                // 'none',
                              ],
                              workingDirectory: '/',
                              environment: {
                                'PROOT_TMP_DIR': '$a/tmp',
                                'PROOT_NO_SECCOMP': '1'
                              },
                              includeParentEnvironment: true,
                            );
                            r.stdout.transform(utf8.decoder).listen((data) {
                              print(data);
                            });
                            r.stderr.transform(utf8.decoder).listen((data) {
                              print(data);
                            });

                            // r.stdin
                            //     .writeln('apk add --update nodejs nodejs-npm');
                            // Process.start('ls', []).then((Process process) {
                            //   process.stdout
                            //       .transform(utf8.decoder)
                            //       .listen((data) {
                            //     print(data);
                            //   });
                            //   process.stderr
                            //       .transform(utf8.decoder)
                            //       .listen((data) {
                            //     print(data);
                            //   });
                            //   process.stdin.writeln('ls -al $a');
                            //   // process.stdin.writeln('Hello, galaxy!');
                            //   // process.stdin.writeln('Hello, universe!');
                            // });
                            // r.stdin.writeln('Hello, galaxy!');
                            // r.stdin.writeln('Hello, universe!');

                            // Directory('$a/rootfs').createSync();
                            // ProcessResult r = await Process.run(
                            //     'tar',
                            //     [
                            //       'zvxf',
                            //       '$a/rootfs/root/code-server.tar.gz',
                            //       '-C',
                            //       '$a/rootfs/root/code-server'
                            //     ],
                            //     workingDirectory: '/');
                            // print(r.stdout.toString());
                            // print(r.stderr.toString());

                            // Process.start(
                            //   'tar',
                            //   [
                            //     'zvxf',
                            //     '$a/alpine-minirootfs-${SysInfo.kernelArchitecture}.tar.gz',
                            //     '-C',
                            //     '$a/rootfs'
                            //   ],
                            // ).then((Process process) {
                            //   process.stdout
                            //       .transform(utf8.decoder)
                            //       .listen((data) {
                            //     print(data);
                            //   });
                            //   // process.stdin.writeln('Hello, world!');
                            //   // process.stdin.writeln('Hello, galaxy!');
                            //   // process.stdin.writeln('Hello, universe!');
                            // });

                            // await Directory(
                            //         '/data/data/com.sewerganger.lan_file_more/files/home')
                            //     .create();
                            // List<ProcessResult> b = await Shell().run(
                            //     'chmod -R 777 /data/data/com.sewerganger.lan_file_more/files/home');
                            // for (var item in b) {
                            //   print(item.stdout.toString());
                            // }

                            // List<ProcessResult> c = await Shell().run(
                            //     'tar zvxf $a/alpine-minirootfs.tar.gz -C $a/rootfs');
                            // for (var item in c) {
                            //   print(item.stdout.toString());
                            // }